generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model GroupAvailableModules {
  id                   Int     @id @default(autoincrement())
  module_id            String
  group_id             String
  unlocked             Boolean
  number_of_completion Int     @default(0)
  Group                Groups  @relation(fields: [group_id], references: [group_id], onDelete: Cascade)
  Module               Modules @relation(fields: [module_id], references: [module_id], onDelete: Cascade)

  @@unique([module_id, group_id])
  @@index([group_id], type: Hash)
  @@index([module_id], type: Hash)
}

model UserModuleProgress {
  id                  Int @id @default(autoincrement())
  user_id            String
  module_id          String
  completed          Boolean   @default(false)
  pages_completed    String[]  @default([])
  completed_time     DateTime? @db.Timestamptz(0)
  last_modified_time DateTime  @default(now()) @db.Timestamptz(0)
  Module             Modules   @relation(fields: [module_id], references: [module_id], onDelete: Cascade)
  User               Users     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@index([module_id], type: Hash)
  @@index([user_id], type: Hash)
}

model Enrolls {
  id       Int    @id @default(autoincrement())
  user_id  String 
  group_id String
  Group    Groups @relation(fields: [group_id], references: [group_id], onDelete: Cascade)
  User     Users  @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@unique([user_id, group_id])
  @@index([group_id], type: Hash)
  @@index([user_id], type: Hash)
}

model Groups {
  group_id                   String                  @id @default(uuid())
  group_name                 String                  @unique
  type                       GroupType
  capacity                   Int
  student_count              Int
  student_last_modified_time DateTime                @default(now()) @db.Timestamptz(0)
  module_last_modified_time  DateTime                @default(now()) @db.Timestamptz(0)
  Enrolls                    Enrolls[]
  GroupAvailableModules      GroupAvailableModules[]
  Manages                    Manages[]

  @@index([group_name], type: Hash)
}

model Manages {
  id       Int    @id @default(autoincrement())
  user_id  String
  group_id String
  Group    Groups @relation(fields: [group_id], references: [group_id], onDelete: Cascade)
  User     Users  @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@unique([user_id, group_id])
  @@index([group_id], type: Hash)
  @@index([user_id], type: Hash)
}

model Modules {
  module_id             String                  @id @default(uuid())
  module_name           String                  @unique
  GroupAvailableModules GroupAvailableModules[]
  UserAvailableModules  UserAvailableModules[]
  UserModuleProgress    UserModuleProgress[]

  @@index([module_name], type: Hash)
}

model UserAvailableModules {
  id        Int     @id @default(autoincrement())
  module_id String
  user_id   String
  Module    Modules @relation(fields: [module_id], references: [module_id], onDelete: Cascade)
  User      Users   @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@unique([module_id, user_id])
  @@index([user_id], type: Hash)
  @@index([module_id], type: Hash)

}

model Users {
  user_id              String                 @id @default(uuid())
  email                String                 @unique
  name                 String
  role                 UserRole
  expiration_date      DateTime?              @db.Timestamptz(0)
  Enrolls              Enrolls[]
  Manages              Manages[]
  UserAvailableModules UserAvailableModules[]
  UserModuleProgress   UserModuleProgress[]

  @@index([email], type: Hash)
}

enum GroupType {
  class
  family
}

enum UserRole {
  student
  teacher
  admin
  parent
}
