// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  student
  teacher
  admin
  parent
}

enum GroupType {
  class
  family
}

model User {
  user_id           String                     @id @default(uuid())
  email             String                     @unique
  name              String
  role              UserRole
  expiration_date   DateTime? //Datetime
  available_modules Student_available_module[]
  enrolled          Enroll?
  managing          Manage[]
  families          Family[]

  @@index([email])
}

model Group {
  group_id          String                   @id @default(uuid())
  group_name        String                   @unique 
  type              GroupType
  capacity          Int
  available_modules Class_available_module[]
  managers          Manage[]
  students          Enroll[]
  children          Family[]
  @@index([group_name])
}

model Enroll {
  id       String @id @default(uuid())
  user_id  String @unique
  group_id String
  student  User   @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  group    Group  @relation(fields: [group_id], references: [group_id], onDelete: Cascade)

  @@unique([user_id, group_id])
  @@index([user_id, group_id])
}

model Manage {
  id       String @id @default(uuid())
  user_id  String
  group_id String
  manager  User   @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  group    Group  @relation(fields: [group_id], references: [group_id], onDelete: Cascade)

  @@unique([user_id, group_id])
  @@index([user_id, group_id])
}

model Family {
  id       String @id @default(uuid())
  user_id  String
  group_id String
  child    User   @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  group    Group  @relation(fields: [group_id], references: [group_id], onDelete: Cascade)

  @@unique([user_id, group_id])
  @@index([user_id, group_id])
}

model Module {
  module_id         String                     @id @default(uuid())
  module_name       String                     @unique
  students          Student_available_module[]
  available_classes Class_available_module[]

  @@index([module_name])
}

model Student_available_module {
  id        String @id @default(uuid())
  module_id String
  user_id   String
  student   User   @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  module    Module @relation(fields: [module_id], references: [module_id], onDelete: Cascade)

  @@unique([module_id, user_id])
}

model Class_available_module {
  id        String  @id @default(uuid())
  module_id String
  group_id  String
  unlocked  Boolean
  class     Group   @relation(fields: [group_id], references: [group_id], onDelete: Cascade)
  module    Module  @relation(fields: [module_id], references: [module_id], onDelete: Cascade)

  @@unique([module_id, group_id])
}

